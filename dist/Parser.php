<?php
/*
 * Generated by PEG.js 0.10.x with phpegjs plugin
 *
 * http://pegjs.majda.cz/
 */

namespace Floip;

/* Useful functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists("Floip\\chr_unicode")) {
    function chr_unicode($code) {
        return html_entity_decode("&#$code;", ENT_QUOTES, "UTF-8");
    }
}
/* ord_unicode - get unicode char code from string */
if (!function_exists("Floip\\ord_unicode")) {
    function ord_unicode($character) {
        if (strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}
/* peg_regex_test - multibyte regex test */
if (!function_exists("Floip\\peg_regex_test")) {
    function peg_regex_test($pattern, $string) {
        if (substr($pattern, -1) == "i") {
            return mb_eregi(substr($pattern, 1, -2), $string);
        } else {
            return mb_ereg(substr($pattern, 1, -1), $string);
        }
    }
}

/* Syntax error exception */
if (!class_exists("Floip\\SyntaxError", false)) {
    class SyntaxError extends \Exception {
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $name;
        public function __construct($message, $expected, $found, $offset, $line, $column) {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->name = "SyntaxError";
        }
    }
}

class Parser {
    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = array();
    private $input_length         = 0;

    private function cleanup_state() {
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = array();
      $this->input_length         = 0;

    }

    private function input_substr($start, $length) {
      if ($length === 1 && $start < $this->input_length) {
        return $this->input[$start];
      }
      $substr = '';
      $max = min($start + $length, $this->input_length);
      for ($i = $start; $i < $max; $i++) {
        $substr .= $this->input[$i];
      }
      return $substr;
    }


    private function text() {
      return substr($this->input, $this->peg_reportedPos, $this->peg_reportedPos + $this->peg_currPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_advancePos(&$details, $startPos, $endPos) {
      for ($p = $startPos; $p < $endPos; $p++) {
        $ch = $this->input_substr($p, 1);
        if ($ch === "\n") {
          if (!$details["seenCR"]) { $details["line"]++; }
          $details["column"] = 1;
          $details["seenCR"] = false;
        } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
          $details["line"]++;
          $details["column"] = 1;
          $details["seenCR"] = true;
        } else {
          $details["column"]++;
          $details["seenCR"] = false;
        }
      }
    }

    private function peg_computePosDetails($pos) {
      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator($a, $b) {
      if ($a["description"] < $b["description"]) {
        return -1;
      } else if ($a["description"] > $b["description"]) {
        return 1;
      } else {
        return 0;
      }
    }

    private function peg_buildException($message, $expected, $pos) {
      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < $this->input_length ? $this->input[$pos] : null;

      if ($expected !== null) {
        usort($expected, array($this, "peg_buildException_expectedComparator"));
        $i = 1;
        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      }

      if ($message === null) {
        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? json_encode($found) : "end of input";

        $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      }

      return new SyntaxError(
        $message,
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;

    private function peg_f0() {}
    private function peg_f1($expr) {
          return $expr;
        }
    private function peg_f2($ex) {
        return $ex;
      }
    private function peg_f3($call, $args) {
        return $this->_method($call, $args, $this->location());
      }
    private function peg_f4($arg) { return $arg;}
    private function peg_f5($lhs, $inner) { return $inner;}
    private function peg_f6($lhs, $rhs) {
        return $this->_member($lhs, $rhs, $this->location());
      }
    private function peg_f7($lhs, $op, $rhs) {
        return $this->_math($lhs, $rhs, $op, $this->location());
      }
    private function peg_f8($lhs, $op, $rhs) {
        return $this->_logic($lhs, $rhs, $op, $this->location());
      }
    private function peg_f9() {
        return $this->_escape($this->location());
      }

    private function peg_parseBlock() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseEscaped_Identifier();
      if ($s2 === $this->peg_FAILED) {
        $s2 = $this->peg_parseExpression();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_currPos;
          $s3 = $this->peg_currPos;
          $s4 = array();
          $s5 = $this->peg_parseText();
          if ($s5 !== $this->peg_FAILED) {
            while ($s5 !== $this->peg_FAILED) {
              $s4[] = $s5;
              $s5 = $this->peg_parseText();
            }
          } else {
            $s4 = $this->peg_FAILED;
          }
          if ($s4 !== $this->peg_FAILED) {
            $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
          } else {
            $s3 = $s4;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s2;
            $s3 = $this->peg_f0();
          }
          $s2 = $s3;
        }
      }
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseEscaped_Identifier();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_parseExpression();
          if ($s2 === $this->peg_FAILED) {
            $s2 = $this->peg_currPos;
            $s3 = $this->peg_currPos;
            $s4 = array();
            $s5 = $this->peg_parseText();
            if ($s5 !== $this->peg_FAILED) {
              while ($s5 !== $this->peg_FAILED) {
                $s4[] = $s5;
                $s5 = $this->peg_parseText();
              }
            } else {
              $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
            } else {
              $s3 = $s4;
            }
            if ($s3 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s2;
              $s3 = $this->peg_f0();
            }
            $s2 = $s3;
          }
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f1($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseExpression() {

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parsews();
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parsews();
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parseText();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parseText();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseIdentifier();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseOpenParen();
            if ($s4 === $this->peg_FAILED) {
              $s4 = null;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseFunction();
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_parseMath();
                if ($s5 === $this->peg_FAILED) {
                  $s5 = $this->peg_parseLogic();
                  if ($s5 === $this->peg_FAILED) {
                    $s5 = $this->peg_parseMember_Access();
                  }
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = $this->peg_parseCloseParen();
                if ($s6 === $this->peg_FAILED) {
                  $s6 = null;
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s7 = array();
                  $s8 = $this->peg_parsews();
                  while ($s8 !== $this->peg_FAILED) {
                    $s7[] = $s8;
                    $s8 = $this->peg_parsews();
                  }
                  if ($s7 !== $this->peg_FAILED) {
                    $this->peg_reportedPos = $s0;
                    $s1 = $this->peg_f2($s5);
                    $s0 = $s1;
                  } else {
                    $this->peg_currPos = $s0;
                    $s0 = $this->peg_FAILED;
                  }
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseFunction() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = array();
      $s3 = $this->peg_parsevalid_variable_characters();
      if ($s3 !== $this->peg_FAILED) {
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsevalid_variable_characters();
        }
      } else {
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
      } else {
        $s1 = $s2;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseOpenParen();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          $s4 = $this->peg_parseFunction_Args();
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_parseFunction_Args();
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseCloseParen();
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f3($s1, $s3);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseFunction_Args() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_parseFunction();
      if ($s2 !== $this->peg_FAILED) {
        $s3 = $this->peg_parseArg_Delimiter();
        if ($s3 === $this->peg_FAILED) {
          $s3 = null;
        }
        if ($s3 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s1;
          $s2 = $this->peg_f4($s2);
          $s1 = $s2;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_currPos;
        $s2 = $this->peg_parseMath();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_parseLogic();
          if ($s2 === $this->peg_FAILED) {
            $s2 = $this->peg_parseMember_Access();
            if ($s2 === $this->peg_FAILED) {
              $s2 = $this->peg_currPos;
              $s3 = array();
              $s4 = $this->peg_parsechars();
              if ($s4 !== $this->peg_FAILED) {
                while ($s4 !== $this->peg_FAILED) {
                  $s3[] = $s4;
                  $s4 = $this->peg_parsechars();
                }
              } else {
                $s3 = $this->peg_FAILED;
              }
              if ($s3 !== $this->peg_FAILED) {
                $s2 = $this->input_substr($s2, $this->peg_currPos - $s2);
              } else {
                $s2 = $s3;
              }
            }
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseArg_Delimiter();
          if ($s3 === $this->peg_FAILED) {
            $s3 = null;
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s1;
            $s2 = $this->peg_f4($s2);
            $s1 = $s2;
          } else {
            $this->peg_currPos = $s1;
            $s1 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f4($s1);
      }
      $s0 = $s1;

      return $s0;
    }

    private function peg_parseMember_Access() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = array();
      $s3 = $this->peg_parsevalid_variable_characters();
      if ($s3 !== $this->peg_FAILED) {
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsevalid_variable_characters();
        }
      } else {
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
      } else {
        $s1 = $s2;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
          $s3 = $this->peg_c0;
          $this->peg_currPos++;
        } else {
          $s3 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c1);
          }
        }
        if ($s3 !== $this->peg_FAILED) {
          $s4 = $this->peg_currPos;
          $s5 = array();
          $s6 = $this->peg_parsevalid_variable_characters();
          if ($s6 !== $this->peg_FAILED) {
            while ($s6 !== $this->peg_FAILED) {
              $s5[] = $s6;
              $s6 = $this->peg_parsevalid_variable_characters();
            }
          } else {
            $s5 = $this->peg_FAILED;
          }
          if ($s5 !== $this->peg_FAILED) {
            $s4 = $this->input_substr($s4, $this->peg_currPos - $s4);
          } else {
            $s4 = $s5;
          }
          if ($s4 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s2;
            $s3 = $this->peg_f5($s1, $s4);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
        if ($s2 === $this->peg_FAILED) {
          $s2 = null;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f6($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseMath() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseMember_Access();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_currPos;
        $s2 = array();
        $s3 = $this->peg_parsenumbers();
        if ($s3 !== $this->peg_FAILED) {
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_parsenumbers();
          }
        } else {
          $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
        } else {
          $s1 = $s2;
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parsews();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsews();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parsemath_chars();
          if ($s4 !== $this->peg_FAILED) {
            $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
          } else {
            $s3 = $s4;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = array();
            $s5 = $this->peg_parsews();
            if ($s5 !== $this->peg_FAILED) {
              while ($s5 !== $this->peg_FAILED) {
                $s4[] = $s5;
                $s5 = $this->peg_parsews();
              }
            } else {
              $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseMember_Access();
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_currPos;
                $s6 = array();
                $s7 = $this->peg_parsenumbers();
                if ($s7 !== $this->peg_FAILED) {
                  while ($s7 !== $this->peg_FAILED) {
                    $s6[] = $s7;
                    $s7 = $this->peg_parsenumbers();
                  }
                } else {
                  $s6 = $this->peg_FAILED;
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s5 = $this->input_substr($s5, $this->peg_currPos - $s5);
                } else {
                  $s5 = $s6;
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = array();
                $s7 = $this->peg_parsews();
                while ($s7 !== $this->peg_FAILED) {
                  $s6[] = $s7;
                  $s7 = $this->peg_parsews();
                }
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f7($s1, $s3, $s5);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseLogic() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseMember_Access();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_currPos;
        $s2 = array();
        $s3 = $this->peg_parsenumbers();
        if ($s3 !== $this->peg_FAILED) {
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_parsenumbers();
          }
        } else {
          $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
        } else {
          $s1 = $s2;
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parsews();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsews();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parselogic_chars();
          if ($s4 !== $this->peg_FAILED) {
            $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
          } else {
            $s3 = $s4;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = array();
            $s5 = $this->peg_parsews();
            if ($s5 !== $this->peg_FAILED) {
              while ($s5 !== $this->peg_FAILED) {
                $s4[] = $s5;
                $s5 = $this->peg_parsews();
              }
            } else {
              $s4 = $this->peg_FAILED;
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseMember_Access();
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_currPos;
                $s6 = array();
                $s7 = $this->peg_parsenumbers();
                if ($s7 !== $this->peg_FAILED) {
                  while ($s7 !== $this->peg_FAILED) {
                    $s6[] = $s7;
                    $s7 = $this->peg_parsenumbers();
                  }
                } else {
                  $s6 = $this->peg_FAILED;
                }
                if ($s6 !== $this->peg_FAILED) {
                  $s5 = $this->input_substr($s5, $this->peg_currPos - $s5);
                } else {
                  $s5 = $s6;
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = array();
                $s7 = $this->peg_parsews();
                while ($s7 !== $this->peg_FAILED) {
                  $s6[] = $s7;
                  $s7 = $this->peg_parsews();
                }
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f8($s1, $s3, $s5);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseEscaped_Identifier() {

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseIdentifier();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f9();
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseOpenParen() {

      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c2) {
        $s0 = $this->peg_c2;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c3);
        }
      }

      return $s0;
    }

    private function peg_parseCloseParen() {

      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c4) {
        $s0 = $this->peg_c4;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c5);
        }
      }

      return $s0;
    }

    private function peg_parseIdentifier() {

      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c6) {
        $s0 = $this->peg_c6;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c7);
        }
      }

      return $s0;
    }

    private function peg_parseArg_Delimiter() {

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c8) {
        $s1 = $this->peg_c8;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c9);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parsews();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsews();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      return $s0;
    }

    private function peg_parseText() {

      if (peg_regex_test($this->peg_c10, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c11);
        }
      }

      return $s0;
    }

    private function peg_parsechars() {

      if (peg_regex_test($this->peg_c12, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c13);
        }
      }

      return $s0;
    }

    private function peg_parsews() {

      $this->peg_silentFails++;
      if (peg_regex_test($this->peg_c15, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c16);
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c14);
        }
      }

      return $s0;
    }

    private function peg_parsevalid_variable_characters() {

      if (peg_regex_test($this->peg_c17, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c18);
        }
      }

      return $s0;
    }

    private function peg_parselogic_chars() {

      if (peg_regex_test($this->peg_c19, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c20);
        }
      }

      return $s0;
    }

    private function peg_parsemath_chars() {

      if (peg_regex_test($this->peg_c21, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c22);
        }
      }

      return $s0;
    }

    private function peg_parsenumbers() {

      if (peg_regex_test($this->peg_c23, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c24);
        }
      }

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();

    if (is_array($input)) {
        $this->input = $input;
    } else {
        preg_match_all("/./us", $input, $match);
        $this->input = $match[0];
    }
    $this->input_length = count($this->input);

    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = ".";
    $this->peg_c1 = array( "type" => "literal", "value" => ".", "description" => "\".\"" );
    $this->peg_c2 = "(";
    $this->peg_c3 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c4 = ")";
    $this->peg_c5 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c6 = "@";
    $this->peg_c7 = array( "type" => "literal", "value" => "@", "description" => "\"@\"" );
    $this->peg_c8 = ",";
    $this->peg_c9 = array( "type" => "literal", "value" => ",", "description" => "\",\"" );
    $this->peg_c10 = "/^[^@]/";
    $this->peg_c11 = array( "type" => "class", "value" => "[@]", "description" => "[@]" );
    $this->peg_c12 = "/^[a-zA-Z0-9 ]/";
    $this->peg_c13 = array( "type" => "class", "value" => "[a-zA-Z0-9 ]", "description" => "[a-zA-Z0-9 ]" );
    $this->peg_c14 = array("type" => "other", "description" => "whitespace" );
    $this->peg_c15 = "/^[ \\t\\n\\r]/";
    $this->peg_c16 = array( "type" => "class", "value" => "[ \t\n\r]", "description" => "[ \t\n\r]" );
    $this->peg_c17 = "/^[a-zA-Z_]/";
    $this->peg_c18 = array( "type" => "class", "value" => "[a-zA-Z_]", "description" => "[a-zA-Z_]" );
    $this->peg_c19 = "/^[=<>!]/";
    $this->peg_c20 = array( "type" => "class", "value" => "[=<>!]", "description" => "[=<>!]" );
    $this->peg_c21 = "/^[-+*\\^\\/]/";
    $this->peg_c22 = array( "type" => "class", "value" => "[-+*^/]", "description" => "[-+*^/]" );
    $this->peg_c23 = "/^[0-9.]/";
    $this->peg_c24 = array( "type" => "class", "value" => "[0-9.]", "description" => "[0-9.]" );

    $peg_startRuleFunctions = array( 'Block' => array($this, "peg_parseBlock") );
    $peg_startRuleFunction  = array($this, "peg_parseBlock");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }

    /* BEGIN initializer code */

      $this->_member = function($key, $value, $location) {
        return (object)[
          'type' => 'MEMBER',
          'key' => $key,
          'value' => $value,
          'location' => $location
        ];
      };
      
      $this->_method = function($call, $args, $location) {
        return (object)[
          'type' => 'MEMBER',
          'call' => $call,
          'args' => $args,
          'location' => $location
        ];
      };
      
      $this->_math = function($lhs, $rhs, $operator, $location) {
        return (object)[
          'type' => 'MATH',
          'rhs' => $rhs,
          'lhs' => $lhs,
          'operator' => $operator,
          'location' => $location
        ];
      };
      
      $this->_logic = function($lhs, $rhs, $operator, $location) {
        return (object)[
          'type' => 'LOGIC',
          'rhs' => $rhs,
          'lhs' => $lhs,
          'operator' => $operator,
          'location' => $location
        ];
      };
      
        $this->_escape = function($location) {
          return (object)[
            'type' => 'ESCAPE',
            'location' => $location
          ];
        };
      
    /* END initializer code */

    $peg_result = call_user_func($peg_startRuleFunction);

    mb_regex_encoding($old_regex_encoding);

    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
      $this->cleanup_state(); // Free up memory
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
      $this->cleanup_state(); // Free up memory
      throw $exception;
    }
  }

};
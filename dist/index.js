// tslint:disable:only-arrow-functions
// tslint:disable:object-literal-shorthand
// tslint:disable:trailing-comma
// tslint:disable:object-literal-sort-keys
// tslint:disable:one-variable-per-declaration
// tslint:disable:max-line-length
// tslint:disable:no-consecutive-blank-lines
// tslint:disable:align
// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.6 )
//
// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var SyntaxError = /** @class */ (function (_super) {
    __extends(SyntaxError, _super);
    function SyntaxError(message, expected, found, location) {
        var _this = _super.call(this) || this;
        _this.message = message;
        _this.expected = expected;
        _this.found = found;
        _this.location = location;
        _this.name = "SyntaxError";
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(_this, SyntaxError);
        }
        return _this;
    }
    SyntaxError.buildMessage = function (expected, found) {
        function hex(ch) {
            return ch.charCodeAt(0).toString(16).toUpperCase();
        }
        function literalEscape(s) {
            return s
                .replace(/\\/g, "\\\\")
                .replace(/"/g, "\\\"")
                .replace(/\0/g, "\\0")
                .replace(/\t/g, "\\t")
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        function classEscape(s) {
            return s
                .replace(/\\/g, "\\\\")
                .replace(/\]/g, "\\]")
                .replace(/\^/g, "\\^")
                .replace(/-/g, "\\-")
                .replace(/\0/g, "\\0")
                .replace(/\t/g, "\\t")
                .replace(/\n/g, "\\n")
                .replace(/\r/g, "\\r")
                .replace(/[\x00-\x0F]/g, function (ch) { return "\\x0" + hex(ch); })
                .replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) { return "\\x" + hex(ch); });
        }
        function describeExpectation(expectation) {
            switch (expectation.type) {
                case "literal":
                    return "\"" + literalEscape(expectation.text) + "\"";
                case "class":
                    var escapedParts = expectation.parts.map(function (part) {
                        return Array.isArray(part)
                            ? classEscape(part[0]) + "-" + classEscape(part[1])
                            : classEscape(part);
                    });
                    return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
                case "any":
                    return "any character";
                case "end":
                    return "end of input";
                case "other":
                    return expectation.description;
            }
        }
        function describeExpected(expected1) {
            var descriptions = expected1.map(describeExpectation);
            var i;
            var j;
            descriptions.sort();
            if (descriptions.length > 0) {
                for (i = 1, j = 1; i < descriptions.length; i++) {
                    if (descriptions[i - 1] !== descriptions[i]) {
                        descriptions[j] = descriptions[i];
                        j++;
                    }
                }
                descriptions.length = j;
            }
            switch (descriptions.length) {
                case 1:
                    return descriptions[0];
                case 2:
                    return descriptions[0] + " or " + descriptions[1];
                default:
                    return descriptions.slice(0, -1).join(", ")
                        + ", or "
                        + descriptions[descriptions.length - 1];
            }
        }
        function describeFound(found1) {
            return found1 ? "\"" + literalEscape(found1) + "\"" : "end of input";
        }
        return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
    };
    return SyntaxError;
}(Error));
exports.SyntaxError = SyntaxError;
function peg$parse(input, options) {
    options = options !== undefined ? options : {};
    var peg$FAILED = {};
    var peg$startRuleFunctions = { Start: peg$parseStart };
    var peg$startRuleFunction = peg$parseStart;
    var peg$c0 = function (id, ex) {
        // we want the location to begin with the identifier for a given expression
        ex.location.start = id.start;
        return ex;
        /** <?php
          $ex['location']['start'] = $id['start'];
          return $ex;
        ?> **/
    };
    var peg$c1 = function (id, ex) { return location(); /**<?php return call_user_func($this->_location); ?> **/ };
    var peg$c2 = function (id, ex, cp) {
        // we want the location to begin with the identifier for a given expression
        ex.location.start = id.start;
        // we want the location to end with the closing paren (or where it would be if absent)
        ex.location.end = cp.end;
        return ex;
        /** <?php
          $ex['location'] = ['start' => $id['start'], 'end' => $cp['end']];
          return $ex;
        ?> **/
    };
    var peg$c3 = function () { return location(); /**<?php return call_user_func($this->_location); ?>**/ };
    var peg$c4 = function (call, args) {
        return method(call, args, location());
        /** <?php
          return call_user_func_array($this->_method, [$call, $args]);
        ?> **/
    };
    var peg$c5 = function (arg) { return arg; /**<?php return $arg;?> **/ };
    var peg$c6 = "-";
    var peg$c7 = peg$literalExpectation("-", false);
    var peg$c8 = ".";
    var peg$c9 = peg$literalExpectation(".", false);
    var peg$c10 = function (lhs, inner) { return inner; /**<?php return $inner;?> **/ };
    var peg$c11 = function (lhs, rhs) {
        return member(lhs, rhs, location());
        /** <?php
          return call_user_func_array($this->_member, [$lhs, $rhs]);
        ?> **/
    };
    var peg$c12 = function (lhs, op, rhs) {
        return math(lhs, rhs, op, location());
        /** <?php
          return call_user_func_array($this->_math, [$lhs, $rhs, $op]);
        ?> **/
    };
    var peg$c13 = function (child) { return child; /**<?php return $child; ?>**/ };
    var peg$c14 = function (lhs, op, rhs) {
        return logic(lhs, rhs, op, location());
        /** <?php
          return call_user_func_array($this->_logic, [$lhs, $rhs, $op]);
        ?> **/
    };
    var peg$c15 = function (lhs, rhs) {
        return concatenate(lhs, rhs, location());
        /**<?php return call_user_func_array($this->_concatenate, [$lhs, $rhs]); ?>**/
    };
    var peg$c16 = function () {
        return escape(location());
        /** <?php
          return call_user_func_array($this->_escape, []);
        ?> **/
    };
    var peg$c17 = "null";
    var peg$c18 = peg$literalExpectation("null", false);
    var peg$c19 = "NULL";
    var peg$c20 = peg$literalExpectation("NULL", false);
    var peg$c21 = function () {
        return nullNode(location());
        /** <?php
          return call_user_func_array($this->_null, []);
        ?> **/
    };
    var peg$c22 = "\"";
    var peg$c23 = peg$literalExpectation("\"", false);
    var peg$c24 = "'";
    var peg$c25 = peg$literalExpectation("'", false);
    var peg$c26 = /^[^']/;
    var peg$c27 = peg$classExpectation(["'"], true, false);
    var peg$c28 = function (ch) { return ch; /**<?php return $ch; ?>**/ };
    var peg$c29 = /^[^"]/;
    var peg$c30 = peg$classExpectation(["\""], true, false);
    var peg$c31 = "(";
    var peg$c32 = peg$literalExpectation("(", false);
    var peg$c33 = ")";
    var peg$c34 = peg$literalExpectation(")", false);
    var peg$c35 = "@";
    var peg$c36 = peg$literalExpectation("@", false);
    var peg$c37 = "&";
    var peg$c38 = peg$literalExpectation("&", false);
    var peg$c39 = ",";
    var peg$c40 = peg$literalExpectation(",", false);
    var peg$c41 = /^[^@]/;
    var peg$c42 = peg$classExpectation(["@"], true, false);
    var peg$c43 = /^[a-zA-Z0-9 ]/;
    var peg$c44 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], " "], false, false);
    var peg$c45 = peg$otherExpectation("whitespace");
    var peg$c46 = /^[ \t\n\r]/;
    var peg$c47 = peg$classExpectation([" ", "\t", "\n", "\r"], false, false);
    var peg$c48 = /^[a-zA-Z_]/;
    var peg$c49 = peg$classExpectation([["a", "z"], ["A", "Z"], "_"], false, false);
    var peg$c50 = "<=";
    var peg$c51 = peg$literalExpectation("<=", false);
    var peg$c52 = ">=";
    var peg$c53 = peg$literalExpectation(">=", false);
    var peg$c54 = /^[=<>]/;
    var peg$c55 = peg$classExpectation(["=", "<", ">"], false, false);
    var peg$c56 = "!=";
    var peg$c57 = peg$literalExpectation("!=", false);
    var peg$c58 = /^[\-+*\^\/]/;
    var peg$c59 = peg$classExpectation(["-", "+", "*", "^", "/"], false, false);
    var peg$c60 = /^[0-9.]/;
    var peg$c61 = peg$classExpectation([["0", "9"], "."], false, false);
    var peg$currPos = 0;
    var peg$savedPos = 0;
    var peg$posDetailsCache = [{ line: 1, column: 1 }];
    var peg$maxFailPos = 0;
    var peg$maxFailExpected = [];
    var peg$silentFails = 0;
    var peg$resultsCache = {};
    var peg$result;
    if (options.startRule !== undefined) {
        if (!(options.startRule in peg$startRuleFunctions)) {
            throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
        }
        peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }
    function text() {
        return input.substring(peg$savedPos, peg$currPos);
    }
    function location() {
        return peg$computeLocation(peg$savedPos, peg$currPos);
    }
    function expected(description, location1) {
        location1 = location1 !== undefined
            ? location1
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location1);
    }
    function error(message, location1) {
        location1 = location1 !== undefined
            ? location1
            : peg$computeLocation(peg$savedPos, peg$currPos);
        throw peg$buildSimpleError(message, location1);
    }
    function peg$literalExpectation(text1, ignoreCase) {
        return { type: "literal", text: text1, ignoreCase: ignoreCase };
    }
    function peg$classExpectation(parts, inverted, ignoreCase) {
        return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
    }
    function peg$anyExpectation() {
        return { type: "any" };
    }
    function peg$endExpectation() {
        return { type: "end" };
    }
    function peg$otherExpectation(description) {
        return { type: "other", description: description };
    }
    function peg$computePosDetails(pos) {
        var details = peg$posDetailsCache[pos];
        var p;
        if (details) {
            return details;
        }
        else {
            p = pos - 1;
            while (!peg$posDetailsCache[p]) {
                p--;
            }
            details = peg$posDetailsCache[p];
            details = {
                line: details.line,
                column: details.column
            };
            while (p < pos) {
                if (input.charCodeAt(p) === 10) {
                    details.line++;
                    details.column = 1;
                }
                else {
                    details.column++;
                }
                p++;
            }
            peg$posDetailsCache[pos] = details;
            return details;
        }
    }
    function peg$computeLocation(startPos, endPos) {
        var startPosDetails = peg$computePosDetails(startPos);
        var endPosDetails = peg$computePosDetails(endPos);
        return {
            start: {
                offset: startPos,
                line: startPosDetails.line,
                column: startPosDetails.column
            },
            end: {
                offset: endPos,
                line: endPosDetails.line,
                column: endPosDetails.column
            }
        };
    }
    function peg$fail(expected1) {
        if (peg$currPos < peg$maxFailPos) {
            return;
        }
        if (peg$currPos > peg$maxFailPos) {
            peg$maxFailPos = peg$currPos;
            peg$maxFailExpected = [];
        }
        peg$maxFailExpected.push(expected1);
    }
    function peg$buildSimpleError(message, location1) {
        return new SyntaxError(message, [], "", location1);
    }
    function peg$buildStructuredError(expected1, found, location1) {
        return new SyntaxError(SyntaxError.buildMessage(expected1, found), expected1, found, location1);
    }
    function peg$parseStart() {
        var s0, s1, s2, s3;
        var key = peg$currPos * 37 + 0;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = [];
        s1 = peg$parseExpression();
        if (s1 === peg$FAILED) {
            s1 = peg$currPos;
            s2 = [];
            s3 = peg$parseText();
            if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                    s2.push(s3);
                    s3 = peg$parseText();
                }
            }
            else {
                s2 = peg$FAILED;
            }
            if (s2 !== peg$FAILED) {
                s1 = input.substring(s1, peg$currPos);
            }
            else {
                s1 = s2;
            }
        }
        while (s1 !== peg$FAILED) {
            s0.push(s1);
            s1 = peg$parseExpression();
            if (s1 === peg$FAILED) {
                s1 = peg$currPos;
                s2 = [];
                s3 = peg$parseText();
                if (s3 !== peg$FAILED) {
                    while (s3 !== peg$FAILED) {
                        s2.push(s3);
                        s3 = peg$parseText();
                    }
                }
                else {
                    s2 = peg$FAILED;
                }
                if (s2 !== peg$FAILED) {
                    s1 = input.substring(s1, peg$currPos);
                }
                else {
                    s1 = s2;
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseExpression() {
        var s0;
        var key = peg$currPos * 37 + 1;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$parseEscaped_Identifier();
        if (s0 === peg$FAILED) {
            s0 = peg$parseClosed_Expression();
            if (s0 === peg$FAILED) {
                s0 = peg$parseOpen_Expression();
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseOpen_Expression() {
        var s0, s1, s2;
        var key = peg$currPos * 37 + 2;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseExpression_Identifier();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseMember_Access();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c0(s1, s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseClosed_Expression() {
        var s0, s1, s2, s3, s4, s5;
        var key = peg$currPos * 37 + 3;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseExpression_Identifier();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseOpenParen();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseExpression_Types();
                if (s3 !== peg$FAILED) {
                    s4 = peg$currPos;
                    s5 = peg$parseCloseParen();
                    if (s5 !== peg$FAILED) {
                        peg$savedPos = s4;
                        s5 = peg$c1(s1, s3);
                    }
                    s4 = s5;
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c2(s1, s3, s4);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseExpression_Identifier() {
        var s0, s1;
        var key = peg$currPos * 37 + 4;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c3();
        }
        s0 = s1;
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseExpression_Types() {
        var s0;
        var key = peg$currPos * 37 + 5;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$parseEscaped_Identifier();
        if (s0 === peg$FAILED) {
            s0 = peg$parseMath();
            if (s0 === peg$FAILED) {
                s0 = peg$parseLogic();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseConcatenation();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseFunction();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseNull();
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseMember_Access();
                            }
                        }
                    }
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseFunction() {
        var s0, s1, s2, s3, s4;
        var key = peg$currPos * 37 + 6;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parsevalid_variable_characters();
        if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsevalid_variable_characters();
            }
        }
        else {
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
        }
        else {
            s1 = s2;
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$parseOpenParen();
            if (s2 !== peg$FAILED) {
                s3 = [];
                s4 = peg$parseFunction_Args();
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    s4 = peg$parseFunction_Args();
                }
                if (s3 !== peg$FAILED) {
                    s4 = peg$parseCloseParen();
                    if (s4 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$c4(s1, s3);
                        s0 = s1;
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseFunction_Args() {
        var s0, s1, s2, s3;
        var key = peg$currPos * 37 + 7;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = peg$parseFunction_Arg_Types();
        if (s2 !== peg$FAILED) {
            s3 = peg$parseArg_Delimiter();
            if (s3 === peg$FAILED) {
                s3 = null;
            }
            if (s3 !== peg$FAILED) {
                peg$savedPos = s1;
                s2 = peg$c5(s2);
                s1 = s2;
            }
            else {
                peg$currPos = s1;
                s1 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s1;
            s1 = peg$FAILED;
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c5(s1);
        }
        s0 = s1;
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseFunction_Arg_Types() {
        var s0, s1, s2, s3, s4;
        var key = peg$currPos * 37 + 8;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$parseLogic();
        if (s0 === peg$FAILED) {
            s0 = peg$parseMath();
            if (s0 === peg$FAILED) {
                s0 = peg$parseFunction_Arg_Inner_Function();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseNull();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseMember_Access();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseQuotedText();
                            if (s0 === peg$FAILED) {
                                s0 = peg$currPos;
                                s1 = peg$currPos;
                                s2 = [];
                                if (input.charCodeAt(peg$currPos) === 45) {
                                    s3 = peg$c6;
                                    peg$currPos++;
                                }
                                else {
                                    s3 = peg$FAILED;
                                    if (peg$silentFails === 0) {
                                        peg$fail(peg$c7);
                                    }
                                }
                                while (s3 !== peg$FAILED) {
                                    s2.push(s3);
                                    if (input.charCodeAt(peg$currPos) === 45) {
                                        s3 = peg$c6;
                                        peg$currPos++;
                                    }
                                    else {
                                        s3 = peg$FAILED;
                                        if (peg$silentFails === 0) {
                                            peg$fail(peg$c7);
                                        }
                                    }
                                }
                                if (s2 !== peg$FAILED) {
                                    s3 = [];
                                    s4 = peg$parsenumbers();
                                    if (s4 !== peg$FAILED) {
                                        while (s4 !== peg$FAILED) {
                                            s3.push(s4);
                                            s4 = peg$parsenumbers();
                                        }
                                    }
                                    else {
                                        s3 = peg$FAILED;
                                    }
                                    if (s3 !== peg$FAILED) {
                                        s2 = [s2, s3];
                                        s1 = s2;
                                    }
                                    else {
                                        peg$currPos = s1;
                                        s1 = peg$FAILED;
                                    }
                                }
                                else {
                                    peg$currPos = s1;
                                    s1 = peg$FAILED;
                                }
                                if (s1 !== peg$FAILED) {
                                    s0 = input.substring(s0, peg$currPos);
                                }
                                else {
                                    s0 = s1;
                                }
                            }
                        }
                    }
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseFunction_Arg_Inner_Function() {
        var s0, s1, s2;
        var key = peg$currPos * 37 + 9;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseFunction();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseArg_Delimiter();
            if (s2 === peg$FAILED) {
                s2 = null;
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c5(s1);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseMember_Access() {
        var s0, s1, s2, s3, s4, s5, s6;
        var key = peg$currPos * 37 + 10;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$currPos;
        s2 = [];
        s3 = peg$parsevalid_variable_characters();
        if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsevalid_variable_characters();
            }
        }
        else {
            s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
            s1 = input.substring(s1, peg$currPos);
        }
        else {
            s1 = s2;
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
                s3 = peg$c8;
                peg$currPos++;
            }
            else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c9);
                }
            }
            if (s3 !== peg$FAILED) {
                s4 = peg$currPos;
                s5 = [];
                s6 = peg$parsevalid_variable_characters();
                if (s6 !== peg$FAILED) {
                    while (s6 !== peg$FAILED) {
                        s5.push(s6);
                        s6 = peg$parsevalid_variable_characters();
                    }
                }
                else {
                    s5 = peg$FAILED;
                }
                if (s5 !== peg$FAILED) {
                    s4 = input.substring(s4, peg$currPos);
                }
                else {
                    s4 = s5;
                }
                if (s4 !== peg$FAILED) {
                    peg$savedPos = s2;
                    s3 = peg$c10(s1, s4);
                    s2 = s3;
                }
                else {
                    peg$currPos = s2;
                    s2 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s2;
                s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
                s2 = null;
            }
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c11(s1, s2);
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseMath() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var key = peg$currPos * 37 + 11;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseMath_Arg();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsews();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsews();
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parsemath_chars();
                if (s4 !== peg$FAILED) {
                    s3 = input.substring(s3, peg$currPos);
                }
                else {
                    s3 = s4;
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsews();
                    if (s5 !== peg$FAILED) {
                        while (s5 !== peg$FAILED) {
                            s4.push(s5);
                            s5 = peg$parsews();
                        }
                    }
                    else {
                        s4 = peg$FAILED;
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseMath();
                        if (s5 === peg$FAILED) {
                            s5 = peg$parseMath_Arg();
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = [];
                            s7 = peg$parsews();
                            while (s7 !== peg$FAILED) {
                                s6.push(s7);
                                s7 = peg$parsews();
                            }
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c12(s1, s3, s5);
                                s0 = s1;
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseMath_Arg() {
        var s0, s1, s2;
        var key = peg$currPos * 37 + 12;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$parseMath_Arg_Inner_Math();
        if (s0 === peg$FAILED) {
            s0 = peg$parseFunction();
            if (s0 === peg$FAILED) {
                s0 = peg$parseMember_Access();
                if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    s1 = [];
                    s2 = peg$parsenumbers();
                    if (s2 !== peg$FAILED) {
                        while (s2 !== peg$FAILED) {
                            s1.push(s2);
                            s2 = peg$parsenumbers();
                        }
                    }
                    else {
                        s1 = peg$FAILED;
                    }
                    if (s1 !== peg$FAILED) {
                        s0 = input.substring(s0, peg$currPos);
                    }
                    else {
                        s0 = s1;
                    }
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseMath_Arg_Inner_Math() {
        var s0, s1, s2, s3;
        var key = peg$currPos * 37 + 13;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseOpenParen();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseMath();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseCloseParen();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c13(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseLogic() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var key = peg$currPos * 37 + 14;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseLogic_Arg();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsews();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsews();
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$currPos;
                s4 = peg$parselogic_chars();
                if (s4 !== peg$FAILED) {
                    s3 = input.substring(s3, peg$currPos);
                }
                else {
                    s3 = s4;
                }
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsews();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsews();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseLogic();
                        if (s5 === peg$FAILED) {
                            s5 = peg$parseLogic_Arg();
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = [];
                            s7 = peg$parsews();
                            while (s7 !== peg$FAILED) {
                                s6.push(s7);
                                s7 = peg$parsews();
                            }
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c14(s1, s3, s5);
                                s0 = s1;
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseLogic_Arg() {
        var s0, s1, s2;
        var key = peg$currPos * 37 + 15;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$parseLogic_Arg_Inner_Logic();
        if (s0 === peg$FAILED) {
            s0 = peg$parseMath();
            if (s0 === peg$FAILED) {
                s0 = peg$parseFunction();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseNull();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseMember_Access();
                        if (s0 === peg$FAILED) {
                            s0 = peg$currPos;
                            s1 = [];
                            s2 = peg$parsenumbers();
                            if (s2 !== peg$FAILED) {
                                while (s2 !== peg$FAILED) {
                                    s1.push(s2);
                                    s2 = peg$parsenumbers();
                                }
                            }
                            else {
                                s1 = peg$FAILED;
                            }
                            if (s1 !== peg$FAILED) {
                                s0 = input.substring(s0, peg$currPos);
                            }
                            else {
                                s0 = s1;
                            }
                            if (s0 === peg$FAILED) {
                                s0 = peg$parseQuotedText();
                            }
                        }
                    }
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseLogic_Arg_Inner_Logic() {
        var s0, s1, s2, s3;
        var key = peg$currPos * 37 + 16;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseOpenParen();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseLogic();
            if (s2 !== peg$FAILED) {
                s3 = peg$parseCloseParen();
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c13(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseConcatenation() {
        var s0, s1, s2, s3, s4, s5, s6, s7;
        var key = peg$currPos * 37 + 17;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseConcatenation_Arg();
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsews();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsews();
            }
            if (s2 !== peg$FAILED) {
                s3 = peg$parseConcat_Operator();
                if (s3 !== peg$FAILED) {
                    s4 = [];
                    s5 = peg$parsews();
                    while (s5 !== peg$FAILED) {
                        s4.push(s5);
                        s5 = peg$parsews();
                    }
                    if (s4 !== peg$FAILED) {
                        s5 = peg$parseConcatenation();
                        if (s5 === peg$FAILED) {
                            s5 = peg$parseConcatenation_Arg();
                        }
                        if (s5 !== peg$FAILED) {
                            s6 = [];
                            s7 = peg$parsews();
                            while (s7 !== peg$FAILED) {
                                s6.push(s7);
                                s7 = peg$parsews();
                            }
                            if (s6 !== peg$FAILED) {
                                peg$savedPos = s0;
                                s1 = peg$c15(s1, s5);
                                s0 = s1;
                            }
                            else {
                                peg$currPos = s0;
                                s0 = peg$FAILED;
                            }
                        }
                        else {
                            peg$currPos = s0;
                            s0 = peg$FAILED;
                        }
                    }
                    else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                    }
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseConcatenation_Arg() {
        var s0;
        var key = peg$currPos * 37 + 18;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$parseEscaped_Identifier();
        if (s0 === peg$FAILED) {
            s0 = peg$parseMath();
            if (s0 === peg$FAILED) {
                s0 = peg$parseLogic();
                if (s0 === peg$FAILED) {
                    s0 = peg$parseFunction();
                    if (s0 === peg$FAILED) {
                        s0 = peg$parseMember_Access();
                        if (s0 === peg$FAILED) {
                            s0 = peg$parseQuotedText();
                        }
                    }
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseEscaped_Identifier() {
        var s0, s1, s2;
        var key = peg$currPos * 37 + 19;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        s1 = peg$parseIdentifier();
        if (s1 !== peg$FAILED) {
            s2 = peg$parseIdentifier();
            if (s2 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c16();
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseNull() {
        var s0, s1;
        var key = peg$currPos * 37 + 20;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c17) {
            s1 = peg$c17;
            peg$currPos += 4;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c18);
            }
        }
        if (s1 === peg$FAILED) {
            if (input.substr(peg$currPos, 4) === peg$c19) {
                s1 = peg$c19;
                peg$currPos += 4;
            }
            else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c20);
                }
            }
        }
        if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c21();
        }
        s0 = s1;
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseQuote() {
        var s0;
        var key = peg$currPos * 37 + 21;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        if (input.charCodeAt(peg$currPos) === 34) {
            s0 = peg$c22;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c23);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseQuotedText() {
        var s0;
        var key = peg$currPos * 37 + 22;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$parseSingleQuotedText();
        if (s0 === peg$FAILED) {
            s0 = peg$parseDoubleQuotedText();
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseSingleQuotedText() {
        var s0, s1, s2, s3, s4;
        var key = peg$currPos * 37 + 23;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 39) {
            s1 = peg$c24;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c25);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c26.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c27);
                }
            }
            if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (peg$c26.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c27);
                        }
                    }
                }
            }
            else {
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
            }
            else {
                s2 = s3;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 39) {
                    s3 = peg$c24;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c25);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c28(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseDoubleQuotedText() {
        var s0, s1, s2, s3, s4;
        var key = peg$currPos * 37 + 24;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 34) {
            s1 = peg$c22;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c23);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = peg$currPos;
            s3 = [];
            if (peg$c29.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
            }
            else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c30);
                }
            }
            if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                    s3.push(s4);
                    if (peg$c29.test(input.charAt(peg$currPos))) {
                        s4 = input.charAt(peg$currPos);
                        peg$currPos++;
                    }
                    else {
                        s4 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c30);
                        }
                    }
                }
            }
            else {
                s3 = peg$FAILED;
            }
            if (s3 !== peg$FAILED) {
                s2 = input.substring(s2, peg$currPos);
            }
            else {
                s2 = s3;
            }
            if (s2 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 34) {
                    s3 = peg$c22;
                    peg$currPos++;
                }
                else {
                    s3 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c23);
                    }
                }
                if (s3 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c28(s2);
                    s0 = s1;
                }
                else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                }
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseOpenParen() {
        var s0;
        var key = peg$currPos * 37 + 25;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        if (input.charCodeAt(peg$currPos) === 40) {
            s0 = peg$c31;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c32);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseCloseParen() {
        var s0;
        var key = peg$currPos * 37 + 26;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        if (input.charCodeAt(peg$currPos) === 41) {
            s0 = peg$c33;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c34);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseIdentifier() {
        var s0;
        var key = peg$currPos * 37 + 27;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        if (input.charCodeAt(peg$currPos) === 64) {
            s0 = peg$c35;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c36);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseConcat_Operator() {
        var s0;
        var key = peg$currPos * 37 + 28;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        if (input.charCodeAt(peg$currPos) === 38) {
            s0 = peg$c37;
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c38);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseArg_Delimiter() {
        var s0, s1, s2, s3;
        var key = peg$currPos * 37 + 29;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        s0 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
            s1 = peg$c39;
            peg$currPos++;
        }
        else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c40);
            }
        }
        if (s1 !== peg$FAILED) {
            s2 = [];
            s3 = peg$parsews();
            while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsews();
            }
            if (s2 !== peg$FAILED) {
                s1 = [s1, s2];
                s0 = s1;
            }
            else {
                peg$currPos = s0;
                s0 = peg$FAILED;
            }
        }
        else {
            peg$currPos = s0;
            s0 = peg$FAILED;
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parseText() {
        var s0;
        var key = peg$currPos * 37 + 30;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        if (peg$c41.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c42);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parsechars() {
        var s0;
        var key = peg$currPos * 37 + 31;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        if (peg$c43.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c44);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parsews() {
        var s0, s1;
        var key = peg$currPos * 37 + 32;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        peg$silentFails++;
        if (peg$c46.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c47);
            }
        }
        peg$silentFails--;
        if (s0 === peg$FAILED) {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c45);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parsevalid_variable_characters() {
        var s0;
        var key = peg$currPos * 37 + 33;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        if (peg$c48.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c49);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parselogic_chars() {
        var s0;
        var key = peg$currPos * 37 + 34;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        if (input.substr(peg$currPos, 2) === peg$c50) {
            s0 = peg$c50;
            peg$currPos += 2;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c51);
            }
        }
        if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c52) {
                s0 = peg$c52;
                peg$currPos += 2;
            }
            else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) {
                    peg$fail(peg$c53);
                }
            }
            if (s0 === peg$FAILED) {
                if (peg$c54.test(input.charAt(peg$currPos))) {
                    s0 = input.charAt(peg$currPos);
                    peg$currPos++;
                }
                else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) {
                        peg$fail(peg$c55);
                    }
                }
                if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c56) {
                        s0 = peg$c56;
                        peg$currPos += 2;
                    }
                    else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) {
                            peg$fail(peg$c57);
                        }
                    }
                }
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parsemath_chars() {
        var s0;
        var key = peg$currPos * 37 + 35;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        if (peg$c58.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c59);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    function peg$parsenumbers() {
        var s0;
        var key = peg$currPos * 37 + 36;
        var cached = peg$resultsCache[key];
        if (cached) {
            peg$currPos = cached.nextPos;
            return cached.result;
        }
        if (peg$c60.test(input.charAt(peg$currPos))) {
            s0 = input.charAt(peg$currPos);
            peg$currPos++;
        }
        else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) {
                peg$fail(peg$c61);
            }
        }
        peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };
        return s0;
    }
    var member = function (key, value, location) {
        return {
            type: 'MEMBER',
            key: key,
            value: value,
            location: location,
        };
    };
    /** <?php
    $this->_member = function($key, $value) {
      return [
        'type' => 'MEMBER',
        'key' => $key,
        'value' => $value,
        'location' => call_user_func($this->_location)
      ];
    };
    ?> **/
    var method = function (call, args, location) {
        return {
            type: 'METHOD',
            call: call,
            args: args,
            location: location
        };
    };
    /** <?php
    $this->_method = function($call, $args) {
      return [
        'type' => 'METHOD',
        'call' => $call,
        'args' => $args,
        'location' => call_user_func($this->_location)
      ];
    };
    ?> **/
    var math = function (lhs, rhs, operator, location) {
        return {
            type: 'MATH',
            lhs: lhs,
            rhs: rhs,
            operator: operator,
            location: location
        };
    };
    /** <?php
    $this->_math = function($lhs, $rhs, $operator) {
      return [
        'type' => 'MATH',
        'lhs' => $lhs,
        'rhs' => $rhs,
        'operator' => $operator,
        'location' => call_user_func($this->_location)
      ];
    };
    ?> **/
    var logic = function (lhs, rhs, operator, location) {
        return {
            type: 'LOGIC',
            lhs: lhs,
            rhs: rhs,
            operator: operator,
            location: location
        };
    };
    /** <?php
    $this->_logic = function($lhs, $rhs, $operator) {
      return [
        'type' => 'LOGIC',
        'rhs' => $rhs,
        'lhs' => $lhs,
        'operator' => $operator,
        'location' => call_user_func($this->_location)
      ];
    };
    ?> **/
    var escape = function (location) {
        return {
            type: 'ESCAPE',
            location: location
        };
    };
    /** <?php
      $this->_escape = function() {
        return [
          'type' => 'ESCAPE',
          'location' => call_user_func($this->_location)
        ];
      };
    ?> **/
    var concatenate = function (lhs, rhs, location) {
        return {
            type: 'CONCATENATE',
            lhs: lhs,
            rhs: rhs,
            location: location
        };
    };
    /** <?php
      $this->_concatenate = function($lhs, $rhs) {
        return [
          'type' => 'CONCATENATE',
          'rhs' => $rhs,
          'lhs' => $lhs,
          'location' => call_user_func($this->_location)
        ];
      };
      ?> **/
    var nullNode = function (location) {
        return {
            type: 'NULL',
            location: location
        };
    };
    /** <?php
      $this->_null = function() {
        return [
          'type' => 'NULL',
          'location' => call_user_func($this->_location)
        ];
      };
    ?> **/
    /** <?php
      // we can build the location information the same way as
      // it is available in js via location()
      $_location = function() {
          $offset_start = $this->peg_reportedPos;
          $offset_end = $this->peg_currPos;
          $compute_pd_start = $this->peg_computePosDetails($offset_start);
          $compute_pd_end = $this->peg_computePosDetails($offset_end);
        return [
          'start' => [
            'offset' => $offset_start,
            'line' => $compute_pd_start['line'],
            'column' => $compute_pd_start['column'],
          ],
          'end' => [
            'offset' => $offset_end,
            'line' => $compute_pd_end['line'],
            'column' => $compute_pd_end['column'],
          ]
        ];
      };
      // Bind the location fn to the parser instance to allow private access
      $this->_location = $_location->bindTo($this);
    ?> **/
    peg$result = peg$startRuleFunction();
    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
        return peg$result;
    }
    else {
        if (peg$result !== peg$FAILED && peg$currPos < input.length) {
            peg$fail(peg$endExpectation());
        }
        throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length
            ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
            : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
    }
}
exports.parse = peg$parse;
//# sourceMappingURL=index.js.map
<?php
/*
 * Generated by PEG.js 0.10.x with phpegjs plugin
 *
 * http://pegjs.majda.cz/
 */

namespace Viamo;

/* Useful functions: */

/* chr_unicode - get unicode character from its char code */
if (!function_exists("Viamo\\chr_unicode")) {
    function chr_unicode($code) {
        return html_entity_decode("&#$code;", ENT_QUOTES, "UTF-8");
    }
}
/* ord_unicode - get unicode char code from string */
if (!function_exists("Viamo\\ord_unicode")) {
    function ord_unicode($character) {
        if (strlen($character) === 1) {
            return ord($character);
        }
        $json = json_encode($character);
        $utf16_1 = hexdec(substr($json, 3, 4));
        if (substr($json, 7, 2) === "\u") {
            $utf16_2 = hexdec(substr($json, 9, 4));
            return 0x10000 + (($utf16_1 & 0x3ff) << 10) + ($utf16_2 & 0x3ff);
        } else {
            return $utf16_1;
        }
    }
}
/* peg_regex_test - multibyte regex test */
if (!function_exists("Viamo\\peg_regex_test")) {
    function peg_regex_test($pattern, $string) {
        if (substr($pattern, -1) == "i") {
            return mb_eregi(substr($pattern, 1, -2), $string);
        } else {
            return mb_ereg(substr($pattern, 1, -1), $string);
        }
    }
}

/* Syntax error exception */
if (!class_exists("Viamo\\SyntaxError", false)) {
    class SyntaxError extends \Exception {
        public $expected;
        public $found;
        public $grammarOffset;
        public $grammarLine;
        public $grammarColumn;
        public $name;
        public function __construct($message, $expected, $found, $offset, $line, $column) {
            parent::__construct($message, 0);
            $this->expected = $expected;
            $this->found = $found;
            $this->grammarOffset = $offset;
            $this->grammarLine = $line;
            $this->grammarColumn = $column;
            $this->name = "SyntaxError";
        }
    }
}

class BaseExpressionParser {
    private $peg_currPos          = 0;
    private $peg_reportedPos      = 0;
    private $peg_cachedPos        = 0;
    private $peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
    private $peg_maxFailPos       = 0;
    private $peg_maxFailExpected  = array();
    private $peg_silentFails      = 0;
    private $input                = array();
    private $input_length         = 0;
    public $peg_cache = array();

    private function cleanup_state() {
      $this->peg_currPos          = 0;
      $this->peg_reportedPos      = 0;
      $this->peg_cachedPos        = 0;
      $this->peg_cachedPosDetails = array('line' => 1, 'column' => 1, 'seenCR' => false );
      $this->peg_maxFailPos       = 0;
      $this->peg_maxFailExpected  = array();
      $this->peg_silentFails      = 0;
      $this->input                = array();
      $this->input_length         = 0;
      $this->peg_cache = array();
    }

    private function input_substr($start, $length) {
      if ($length === 1 && $start < $this->input_length) {
        return $this->input[$start];
      }
      $substr = '';
      $max = min($start + $length, $this->input_length);
      for ($i = $start; $i < $max; $i++) {
        $substr .= $this->input[$i];
      }
      return $substr;
    }


    private function text() {
      return substr($this->input, $this->peg_reportedPos, $this->peg_reportedPos + $this->peg_currPos);
    }

    private function offset() {
      return $this->peg_reportedPos;
    }

    private function line() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["line"];
    }

    private function column() {
      $compute_pd = $this->peg_computePosDetails($this->peg_reportedPos);
      return $compute_pd["column"];
    }

    private function expected($description) {
      throw $this->peg_buildException(
        null,
        array(array("type" => "other", "description" => $description )),
        $this->peg_reportedPos
      );
    }

    private function error($message) {
      throw $this->peg_buildException($message, null, $this->peg_reportedPos);
    }

    private function peg_advancePos(&$details, $startPos, $endPos) {
      for ($p = $startPos; $p < $endPos; $p++) {
        $ch = $this->input_substr($p, 1);
        if ($ch === "\n") {
          if (!$details["seenCR"]) { $details["line"]++; }
          $details["column"] = 1;
          $details["seenCR"] = false;
        } else if ($ch === "\r" || $ch === "\u2028" || $ch === "\u2029") {
          $details["line"]++;
          $details["column"] = 1;
          $details["seenCR"] = true;
        } else {
          $details["column"]++;
          $details["seenCR"] = false;
        }
      }
    }

    private function peg_computePosDetails($pos) {
      if ($this->peg_cachedPos !== $pos) {
        if ($this->peg_cachedPos > $pos) {
          $this->peg_cachedPos = 0;
          $this->peg_cachedPosDetails = array( "line" => 1, "column" => 1, "seenCR" => false );
        }
        $this->peg_advancePos($this->peg_cachedPosDetails, $this->peg_cachedPos, $pos);
        $this->peg_cachedPos = $pos;
      }

      return $this->peg_cachedPosDetails;
    }

    private function peg_fail($expected) {
      if ($this->peg_currPos < $this->peg_maxFailPos) { return; }

      if ($this->peg_currPos > $this->peg_maxFailPos) {
        $this->peg_maxFailPos = $this->peg_currPos;
        $this->peg_maxFailExpected = array();
      }

      $this->peg_maxFailExpected[] = $expected;
    }

    private function peg_buildException_expectedComparator($a, $b) {
      if ($a["description"] < $b["description"]) {
        return -1;
      } else if ($a["description"] > $b["description"]) {
        return 1;
      } else {
        return 0;
      }
    }

    private function peg_buildException($message, $expected, $pos) {
      $posDetails = $this->peg_computePosDetails($pos);
      $found      = $pos < $this->input_length ? $this->input[$pos] : null;

      if ($expected !== null) {
        usort($expected, array($this, "peg_buildException_expectedComparator"));
        $i = 1;
        while ($i < count($expected)) {
          if ($expected[$i - 1] === $expected[$i]) {
            array_splice($expected, $i, 1);
          } else {
            $i++;
          }
        }
      }

      if ($message === null) {
        $expectedDescs = array_fill(0, count($expected), null);

        for ($i = 0; $i < count($expected); $i++) {
          $expectedDescs[$i] = $expected[$i]["description"];
        }

        $expectedDesc = count($expected) > 1
          ? join(", ", array_slice($expectedDescs, 0, -1))
              . " or "
              . $expectedDescs[count($expected) - 1]
          : $expectedDescs[0];

        $foundDesc = $found ? json_encode($found) : "end of input";

        $message = "Expected " . $expectedDesc . " but " . $foundDesc . " found.";
      }

      return new SyntaxError(
        $message,
        $expected,
        $found,
        $pos,
        $posDetails["line"],
        $posDetails["column"]
      );
    }

    private $peg_FAILED;
    private $peg_c0;
    private $peg_c1;
    private $peg_c2;
    private $peg_c3;
    private $peg_c4;
    private $peg_c5;
    private $peg_c6;
    private $peg_c7;
    private $peg_c8;
    private $peg_c9;
    private $peg_c10;
    private $peg_c11;
    private $peg_c12;
    private $peg_c13;
    private $peg_c14;
    private $peg_c15;
    private $peg_c16;
    private $peg_c17;
    private $peg_c18;
    private $peg_c19;
    private $peg_c20;
    private $peg_c21;
    private $peg_c22;
    private $peg_c23;
    private $peg_c24;
    private $peg_c25;
    private $peg_c26;
    private $peg_c27;
    private $peg_c28;
    private $peg_c29;
    private $peg_c30;
    private $peg_c31;
    private $peg_c32;
    private $peg_c33;
    private $peg_c34;
    private $peg_c35;
    private $peg_c36;
    private $peg_c37;
    private $peg_c38;
    private $peg_c39;
    private $peg_c40;
    private $peg_c41;
    private $peg_c42;
    private $peg_c43;
    private $peg_c44;
    private $peg_c45;
    private $peg_c46;
    private $peg_c47;
    private $peg_c48;
    private $peg_c49;
    private $peg_c50;
    private $peg_c51;
    private $peg_c52;
    private $peg_c53;
    private $peg_c54;
    private $peg_c55;
    private $peg_c56;
    private $peg_c57;
    private $peg_c58;
    private $peg_c59;
    private $peg_c60;

    private function peg_f0($id, $ex) {
        $ex['location']['start'] = $id['start'];
        return $ex;
      }
    private function peg_f1($id, $ex) { return call_user_func($this->_location); }
    private function peg_f2($id, $ex, $cp) {
        $ex['location'] = ['start' => $id['start'], 'end' => $cp['end']];
        return $ex;
      }
    private function peg_f3() { return call_user_func($this->_location); }
    private function peg_f4($call, $args, $chain) {
        return call_user_func_array($this->_method, [$call, $args, $chain]);
      }
    private function peg_f5($call) { return $call; }
    private function peg_f6($arg) { return $arg;}
    private function peg_f7($key) {
        return call_user_func_array($this->_member, [$key]);
      }
    private function peg_f8($lhs, $op, $rhs) {
        return call_user_func_array($this->_math, [$lhs, $rhs, $op]);
      }
    private function peg_f9($arg) { return $arg; }
    private function peg_f10($lhs, $op, $rhs) {
        return call_user_func_array($this->_logic, [$lhs, $rhs, $op]);
      }
    private function peg_f11($lhs, $rhs) { return call_user_func_array($this->_concatenate, [$lhs, $rhs]); }
    private function peg_f12() {
        return call_user_func_array($this->_escape, []);
      }
    private function peg_f13() {
        return call_user_func_array($this->_null, []);
      }
    private function peg_f14() {
        return call_user_func_array($this->_bool, []);
      }
    private function peg_f15($ch) { return $ch; }
    private function peg_f16($ch) { return implode($ch); }

    private function peg_parseStart() {

      $key    = $this->peg_currPos * 43 + 0;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = array();
      $s1 = $this->peg_parseExpression();
      if ($s1 === $this->peg_FAILED) {
        $s1 = $this->peg_currPos;
        $s2 = array();
        $s3 = $this->peg_parseText();
        if ($s3 !== $this->peg_FAILED) {
          while ($s3 !== $this->peg_FAILED) {
            $s2[] = $s3;
            $s3 = $this->peg_parseText();
          }
        } else {
          $s2 = $this->peg_FAILED;
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
        } else {
          $s1 = $s2;
        }
      }
      while ($s1 !== $this->peg_FAILED) {
        $s0[] = $s1;
        $s1 = $this->peg_parseExpression();
        if ($s1 === $this->peg_FAILED) {
          $s1 = $this->peg_currPos;
          $s2 = array();
          $s3 = $this->peg_parseText();
          if ($s3 !== $this->peg_FAILED) {
            while ($s3 !== $this->peg_FAILED) {
              $s2[] = $s3;
              $s3 = $this->peg_parseText();
            }
          } else {
            $s2 = $this->peg_FAILED;
          }
          if ($s2 !== $this->peg_FAILED) {
            $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
          } else {
            $s1 = $s2;
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpression() {

      $key    = $this->peg_currPos * 43 + 1;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_parseEscaped_Identifier();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseClosed_Expression();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseOpen_Expression();
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseOpen_Expression() {

      $key    = $this->peg_currPos * 43 + 2;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExpression_Identifier();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseMember_Access();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_parseFunction();
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f0($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseClosed_Expression() {

      $key    = $this->peg_currPos * 43 + 3;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseExpression_Identifier();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseOpenParen();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseExpression_Types();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_currPos;
            $s5 = $this->peg_parseCloseParen();
            if ($s5 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s4;
              $s5 = $this->peg_f1($s1, $s3);
            }
            $s4 = $s5;
            if ($s4 !== $this->peg_FAILED) {
              $this->peg_reportedPos = $s0;
              $s1 = $this->peg_f2($s1, $s3, $s4);
              $s0 = $s1;
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpression_Identifier() {

      $key    = $this->peg_currPos * 43 + 4;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f3();
      }
      $s0 = $s1;

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseExpression_Types() {

      $key    = $this->peg_currPos * 43 + 5;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_parseEscaped_Identifier();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseLogic();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseMath();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseConcatenation();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseFunction();
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parseNull();
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_parseBool();
                  if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_parseMember_Access();
                  }
                }
              }
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseFunction() {

      $key    = $this->peg_currPos * 43 + 6;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = array();
      $s3 = $this->peg_parsevalid_variable_characters();
      while ($s3 !== $this->peg_FAILED) {
        $s2[] = $s3;
        $s3 = $this->peg_parsevalid_variable_characters();
      }
      if ($s2 !== $this->peg_FAILED) {
        $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
      } else {
        $s1 = $s2;
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseOpenParen();
        if ($s2 !== $this->peg_FAILED) {
          $s3 = array();
          $s4 = $this->peg_parseFunction_Args();
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_parseFunction_Args();
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = $this->peg_parseCloseParen();
            if ($s4 !== $this->peg_FAILED) {
              $s5 = array();
              $s6 = $this->peg_parseChain_Function();
              while ($s6 !== $this->peg_FAILED) {
                $s5[] = $s6;
                $s6 = $this->peg_parseChain_Function();
              }
              if ($s5 !== $this->peg_FAILED) {
                $this->peg_reportedPos = $s0;
                $s1 = $this->peg_f4($s1, $s3, $s5);
                $s0 = $s1;
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseChain_Function() {

      $key    = $this->peg_currPos * 43 + 7;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
        $s1 = $this->peg_c0;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c1);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_currPos;
        $s3 = array();
        $s4 = $this->peg_parsevalid_variable_characters();
        if ($s4 !== $this->peg_FAILED) {
          while ($s4 !== $this->peg_FAILED) {
            $s3[] = $s4;
            $s4 = $this->peg_parsevalid_variable_characters();
          }
        } else {
          $s3 = $this->peg_FAILED;
        }
        if ($s3 !== $this->peg_FAILED) {
          $s2 = $this->input_substr($s2, $this->peg_currPos - $s2);
        } else {
          $s2 = $s3;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f5($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseFunction_Args() {

      $key    = $this->peg_currPos * 43 + 8;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_parseFunction_Arg_Types();
      if ($s2 !== $this->peg_FAILED) {
        $s3 = $this->peg_parseArg_Delimiter();
        if ($s3 === $this->peg_FAILED) {
          $s3 = null;
        }
        if ($s3 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s1;
          $s2 = $this->peg_f6($s2);
          $s1 = $s2;
        } else {
          $this->peg_currPos = $s1;
          $s1 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s1;
        $s1 = $this->peg_FAILED;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f6($s1);
      }
      $s0 = $s1;

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseFunction_Arg_Types() {

      $key    = $this->peg_currPos * 43 + 9;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_parseConcatenation();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseLogic();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseMath();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseFunction_Arg_Inner_Function();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseNull();
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parseBool();
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_parseMember_Access();
                  if ($s0 === $this->peg_FAILED) {
                    $s0 = $this->peg_parseQuotedText();
                    if ($s0 === $this->peg_FAILED) {
                      $s0 = $this->peg_currPos;
                      $s1 = $this->peg_currPos;
                      $s2 = array();
                      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c2) {
                        $s3 = $this->peg_c2;
                        $this->peg_currPos++;
                      } else {
                        $s3 = $this->peg_FAILED;
                        if ($this->peg_silentFails === 0) {
                            $this->peg_fail($this->peg_c3);
                        }
                      }
                      while ($s3 !== $this->peg_FAILED) {
                        $s2[] = $s3;
                        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c2) {
                          $s3 = $this->peg_c2;
                          $this->peg_currPos++;
                        } else {
                          $s3 = $this->peg_FAILED;
                          if ($this->peg_silentFails === 0) {
                              $this->peg_fail($this->peg_c3);
                          }
                        }
                      }
                      if ($s2 !== $this->peg_FAILED) {
                        $s3 = array();
                        $s4 = $this->peg_parsenumbers();
                        if ($s4 !== $this->peg_FAILED) {
                          while ($s4 !== $this->peg_FAILED) {
                            $s3[] = $s4;
                            $s4 = $this->peg_parsenumbers();
                          }
                        } else {
                          $s3 = $this->peg_FAILED;
                        }
                        if ($s3 !== $this->peg_FAILED) {
                          $s2 = array($s2, $s3);
                          $s1 = $s2;
                        } else {
                          $this->peg_currPos = $s1;
                          $s1 = $this->peg_FAILED;
                        }
                      } else {
                        $this->peg_currPos = $s1;
                        $s1 = $this->peg_FAILED;
                      }
                      if ($s1 !== $this->peg_FAILED) {
                        $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
                      } else {
                        $s0 = $s1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseFunction_Arg_Inner_Function() {

      $key    = $this->peg_currPos * 43 + 10;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseFunction();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseArg_Delimiter();
        if ($s2 === $this->peg_FAILED) {
          $s2 = null;
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f6($s1);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseMember_Access() {

      $key    = $this->peg_currPos * 43 + 11;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_currPos;
      $s2 = $this->peg_currPos;
      $s3 = array();
      $s4 = $this->peg_parsevalid_variable_characters();
      if ($s4 !== $this->peg_FAILED) {
        while ($s4 !== $this->peg_FAILED) {
          $s3[] = $s4;
          $s4 = $this->peg_parsevalid_variable_characters();
        }
      } else {
        $s3 = $this->peg_FAILED;
      }
      if ($s3 !== $this->peg_FAILED) {
        $s4 = $this->peg_currPos;
        $this->peg_silentFails++;
        $s5 = $this->peg_parseOpenParen();
        $this->peg_silentFails--;
        if ($s5 === $this->peg_FAILED) {
          $s4 = null;
        } else {
          $this->peg_currPos = $s4;
          $s4 = $this->peg_FAILED;
        }
        if ($s4 !== $this->peg_FAILED) {
          $s5 = array();
          $s6 = $this->peg_currPos;
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
            $s7 = $this->peg_c0;
            $this->peg_currPos++;
          } else {
            $s7 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c1);
            }
          }
          if ($s7 !== $this->peg_FAILED) {
            $s8 = array();
            if (peg_regex_test($this->peg_c4, $this->input_substr($this->peg_currPos, 1))) {
              $s9 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s9 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c5);
              }
            }
            if ($s9 !== $this->peg_FAILED) {
              while ($s9 !== $this->peg_FAILED) {
                $s8[] = $s9;
                if (peg_regex_test($this->peg_c4, $this->input_substr($this->peg_currPos, 1))) {
                  $s9 = $this->input_substr($this->peg_currPos, 1);
                  $this->peg_currPos++;
                } else {
                  $s9 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c5);
                  }
                }
              }
            } else {
              $s8 = $this->peg_FAILED;
            }
            if ($s8 !== $this->peg_FAILED) {
              $s7 = array($s7, $s8);
              $s6 = $s7;
            } else {
              $this->peg_currPos = $s6;
              $s6 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s6;
            $s6 = $this->peg_FAILED;
          }
          if ($s6 !== $this->peg_FAILED) {
            while ($s6 !== $this->peg_FAILED) {
              $s5[] = $s6;
              $s6 = $this->peg_currPos;
              if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c0) {
                $s7 = $this->peg_c0;
                $this->peg_currPos++;
              } else {
                $s7 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c1);
                }
              }
              if ($s7 !== $this->peg_FAILED) {
                $s8 = array();
                if (peg_regex_test($this->peg_c4, $this->input_substr($this->peg_currPos, 1))) {
                  $s9 = $this->input_substr($this->peg_currPos, 1);
                  $this->peg_currPos++;
                } else {
                  $s9 = $this->peg_FAILED;
                  if ($this->peg_silentFails === 0) {
                      $this->peg_fail($this->peg_c5);
                  }
                }
                if ($s9 !== $this->peg_FAILED) {
                  while ($s9 !== $this->peg_FAILED) {
                    $s8[] = $s9;
                    if (peg_regex_test($this->peg_c4, $this->input_substr($this->peg_currPos, 1))) {
                      $s9 = $this->input_substr($this->peg_currPos, 1);
                      $this->peg_currPos++;
                    } else {
                      $s9 = $this->peg_FAILED;
                      if ($this->peg_silentFails === 0) {
                          $this->peg_fail($this->peg_c5);
                      }
                    }
                  }
                } else {
                  $s8 = $this->peg_FAILED;
                }
                if ($s8 !== $this->peg_FAILED) {
                  $s7 = array($s7, $s8);
                  $s6 = $s7;
                } else {
                  $this->peg_currPos = $s6;
                  $s6 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s6;
                $s6 = $this->peg_FAILED;
              }
            }
          } else {
            $s5 = $this->peg_FAILED;
          }
          if ($s5 === $this->peg_FAILED) {
            $s5 = null;
          }
          if ($s5 !== $this->peg_FAILED) {
            $s3 = array($s3, $s4, $s5);
            $s2 = $s3;
          } else {
            $this->peg_currPos = $s2;
            $s2 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s2;
          $s2 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s2;
        $s2 = $this->peg_FAILED;
      }
      if ($s2 !== $this->peg_FAILED) {
        $s1 = $this->input_substr($s1, $this->peg_currPos - $s1);
      } else {
        $s1 = $s2;
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f7($s1);
      }
      $s0 = $s1;

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseMath() {

      $key    = $this->peg_currPos * 43 + 12;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseMath_Arg();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parsews();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsews();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parsemath_chars();
          if ($s4 !== $this->peg_FAILED) {
            $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
          } else {
            $s3 = $s4;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = array();
            $s5 = $this->peg_parsews();
            while ($s5 !== $this->peg_FAILED) {
              $s4[] = $s5;
              $s5 = $this->peg_parsews();
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseConcatenation();
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_parseMath();
                if ($s5 === $this->peg_FAILED) {
                  $s5 = $this->peg_parseMath_Arg();
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = array();
                $s7 = $this->peg_parsews();
                while ($s7 !== $this->peg_FAILED) {
                  $s6[] = $s7;
                  $s7 = $this->peg_parsews();
                }
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f8($s1, $s3, $s5);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseMath_Arg() {

      $key    = $this->peg_currPos * 43 + 13;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseOpenParen();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseMath();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_parseMath_Arg_Types();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseCloseParen();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f9($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseMath_Arg_Types();
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseMath_Arg_Types() {

      $key    = $this->peg_currPos * 43 + 14;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_parseFunction();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseMember_Access();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_currPos;
          $s1 = array();
          $s2 = $this->peg_parsenumbers();
          if ($s2 !== $this->peg_FAILED) {
            while ($s2 !== $this->peg_FAILED) {
              $s1[] = $s2;
              $s2 = $this->peg_parsenumbers();
            }
          } else {
            $s1 = $this->peg_FAILED;
          }
          if ($s1 !== $this->peg_FAILED) {
            $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
          } else {
            $s0 = $s1;
          }
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseQuotedText();
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseLogic() {

      $key    = $this->peg_currPos * 43 + 15;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseLogic_Arg();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parsews();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsews();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_currPos;
          $s4 = $this->peg_parselogic_chars();
          if ($s4 !== $this->peg_FAILED) {
            $s3 = $this->input_substr($s3, $this->peg_currPos - $s3);
          } else {
            $s3 = $s4;
          }
          if ($s3 !== $this->peg_FAILED) {
            $s4 = array();
            $s5 = $this->peg_parsews();
            while ($s5 !== $this->peg_FAILED) {
              $s4[] = $s5;
              $s5 = $this->peg_parsews();
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseConcatenation();
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_parseLogic();
                if ($s5 === $this->peg_FAILED) {
                  $s5 = $this->peg_parseLogic_Arg();
                }
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = array();
                $s7 = $this->peg_parsews();
                while ($s7 !== $this->peg_FAILED) {
                  $s6[] = $s7;
                  $s7 = $this->peg_parsews();
                }
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f10($s1, $s3, $s5);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseLogic_Arg() {

      $key    = $this->peg_currPos * 43 + 16;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseOpenParen();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseLogic_Arg_Types();
        if ($s2 === $this->peg_FAILED) {
          $s2 = $this->peg_parseLogic();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseCloseParen();
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f9($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseLogic_Arg_Types();
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseLogic_Arg_Types() {

      $key    = $this->peg_currPos * 43 + 17;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_parseMath();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseFunction();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseNull();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseBool();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseMember_Access();
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_currPos;
                $s1 = array();
                $s2 = $this->peg_parsenumbers();
                if ($s2 !== $this->peg_FAILED) {
                  while ($s2 !== $this->peg_FAILED) {
                    $s1[] = $s2;
                    $s2 = $this->peg_parsenumbers();
                  }
                } else {
                  $s1 = $this->peg_FAILED;
                }
                if ($s1 !== $this->peg_FAILED) {
                  $s0 = $this->input_substr($s0, $this->peg_currPos - $s0);
                } else {
                  $s0 = $s1;
                }
                if ($s0 === $this->peg_FAILED) {
                  $s0 = $this->peg_parseQuotedText();
                }
              }
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseConcatenation() {

      $key    = $this->peg_currPos * 43 + 18;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseConcatenation_Arg();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parsews();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsews();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s3 = $this->peg_parseConcat_Operator();
          if ($s3 !== $this->peg_FAILED) {
            $s4 = array();
            $s5 = $this->peg_parsews();
            while ($s5 !== $this->peg_FAILED) {
              $s4[] = $s5;
              $s5 = $this->peg_parsews();
            }
            if ($s4 !== $this->peg_FAILED) {
              $s5 = $this->peg_parseConcatenation();
              if ($s5 === $this->peg_FAILED) {
                $s5 = $this->peg_parseConcatenation_Arg();
              }
              if ($s5 !== $this->peg_FAILED) {
                $s6 = array();
                $s7 = $this->peg_parsews();
                while ($s7 !== $this->peg_FAILED) {
                  $s6[] = $s7;
                  $s7 = $this->peg_parsews();
                }
                if ($s6 !== $this->peg_FAILED) {
                  $this->peg_reportedPos = $s0;
                  $s1 = $this->peg_f11($s1, $s5);
                  $s0 = $s1;
                } else {
                  $this->peg_currPos = $s0;
                  $s0 = $this->peg_FAILED;
                }
              } else {
                $this->peg_currPos = $s0;
                $s0 = $this->peg_FAILED;
              }
            } else {
              $this->peg_currPos = $s0;
              $s0 = $this->peg_FAILED;
            }
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseConcatenation_Arg() {

      $key    = $this->peg_currPos * 43 + 19;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_parseEscaped_Identifier();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseMath();
        if ($s0 === $this->peg_FAILED) {
          $s0 = $this->peg_parseLogic();
          if ($s0 === $this->peg_FAILED) {
            $s0 = $this->peg_parseFunction();
            if ($s0 === $this->peg_FAILED) {
              $s0 = $this->peg_parseMember_Access();
              if ($s0 === $this->peg_FAILED) {
                $s0 = $this->peg_parseQuotedText();
              }
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseEscaped_Identifier() {

      $key    = $this->peg_currPos * 43 + 20;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseIdentifier();
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseIdentifier();
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f12();
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseNull() {

      $key    = $this->peg_currPos * 43 + 21;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 4) === $this->peg_c6) {
        $s1 = $this->peg_c6;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c7);
        }
      }
      if ($s1 === $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_c8) {
          $s1 = $this->peg_c8;
          $this->peg_currPos += 4;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c9);
          }
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f13();
      }
      $s0 = $s1;

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseBool() {

      $key    = $this->peg_currPos * 43 + 22;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 4) === $this->peg_c10) {
        $s1 = $this->peg_c10;
        $this->peg_currPos += 4;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c11);
        }
      }
      if ($s1 === $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 4) === $this->peg_c12) {
          $s1 = $this->peg_c12;
          $this->peg_currPos += 4;
        } else {
          $s1 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c13);
          }
        }
        if ($s1 === $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 5) === $this->peg_c14) {
            $s1 = $this->peg_c14;
            $this->peg_currPos += 5;
          } else {
            $s1 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c15);
            }
          }
          if ($s1 === $this->peg_FAILED) {
            if ($this->input_substr($this->peg_currPos, 5) === $this->peg_c16) {
              $s1 = $this->peg_c16;
              $this->peg_currPos += 5;
            } else {
              $s1 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c17);
              }
            }
          }
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f14();
      }
      $s0 = $s1;

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseBackslash() {

      $key    = $this->peg_currPos * 43 + 23;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c18) {
        $s0 = $this->peg_c18;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c19);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseEscapedSingleQuote() {

      $key    = $this->peg_currPos * 43 + 24;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseBackslash();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c20) {
          $s2 = $this->peg_c20;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c21);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f15($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseEscapedDoubleQuote() {

      $key    = $this->peg_currPos * 43 + 25;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = $this->peg_parseBackslash();
      if ($s1 !== $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c22) {
          $s2 = $this->peg_c22;
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c23);
          }
        }
        if ($s2 !== $this->peg_FAILED) {
          $this->peg_reportedPos = $s0;
          $s1 = $this->peg_f15($s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseQuotedText() {

      $key    = $this->peg_currPos * 43 + 26;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_parseSingleQuotedText();
      if ($s0 === $this->peg_FAILED) {
        $s0 = $this->peg_parseDoubleQuotedText();
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseInnerDoubleQuotedText() {

      $key    = $this->peg_currPos * 43 + 27;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseEscapedDoubleQuote();
      if ($s2 === $this->peg_FAILED) {
        if (peg_regex_test($this->peg_c24, $this->input_substr($this->peg_currPos, 1))) {
          $s2 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c25);
          }
        }
      }
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseEscapedDoubleQuote();
        if ($s2 === $this->peg_FAILED) {
          if (peg_regex_test($this->peg_c24, $this->input_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c25);
            }
          }
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f16($s1);
      }
      $s0 = $s1;

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseInnerSingleQuotedText() {

      $key    = $this->peg_currPos * 43 + 28;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      $s1 = array();
      $s2 = $this->peg_parseEscapedSingleQuote();
      if ($s2 === $this->peg_FAILED) {
        if (peg_regex_test($this->peg_c26, $this->input_substr($this->peg_currPos, 1))) {
          $s2 = $this->input_substr($this->peg_currPos, 1);
          $this->peg_currPos++;
        } else {
          $s2 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c27);
          }
        }
      }
      while ($s2 !== $this->peg_FAILED) {
        $s1[] = $s2;
        $s2 = $this->peg_parseEscapedSingleQuote();
        if ($s2 === $this->peg_FAILED) {
          if (peg_regex_test($this->peg_c26, $this->input_substr($this->peg_currPos, 1))) {
            $s2 = $this->input_substr($this->peg_currPos, 1);
            $this->peg_currPos++;
          } else {
            $s2 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c27);
            }
          }
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $this->peg_reportedPos = $s0;
        $s1 = $this->peg_f16($s1);
      }
      $s0 = $s1;

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseSingleQuotedText() {

      $key    = $this->peg_currPos * 43 + 29;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c20) {
        $s1 = $this->peg_c20;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c21);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseInnerSingleQuotedText();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c20) {
            $s3 = $this->peg_c20;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c21);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f15($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseDoubleQuotedText() {

      $key    = $this->peg_currPos * 43 + 30;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c22) {
        $s1 = $this->peg_c22;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c23);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = $this->peg_parseInnerDoubleQuotedText();
        if ($s2 !== $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c22) {
            $s3 = $this->peg_c22;
            $this->peg_currPos++;
          } else {
            $s3 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c23);
            }
          }
          if ($s3 !== $this->peg_FAILED) {
            $this->peg_reportedPos = $s0;
            $s1 = $this->peg_f15($s2);
            $s0 = $s1;
          } else {
            $this->peg_currPos = $s0;
            $s0 = $this->peg_FAILED;
          }
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseOpenParen() {

      $key    = $this->peg_currPos * 43 + 31;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c28) {
        $s0 = $this->peg_c28;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c29);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseCloseParen() {

      $key    = $this->peg_currPos * 43 + 32;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c30) {
        $s0 = $this->peg_c30;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c31);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseIdentifier() {

      $key    = $this->peg_currPos * 43 + 33;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c32) {
        $s0 = $this->peg_c32;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c33);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseConcat_Operator() {

      $key    = $this->peg_currPos * 43 + 34;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c34) {
        $s0 = $this->peg_c34;
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c35);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseArg_Delimiter() {

      $key    = $this->peg_currPos * 43 + 35;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $s0 = $this->peg_currPos;
      if ($this->input_substr($this->peg_currPos, 1) === $this->peg_c36) {
        $s1 = $this->peg_c36;
        $this->peg_currPos++;
      } else {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c37);
        }
      }
      if ($s1 !== $this->peg_FAILED) {
        $s2 = array();
        $s3 = $this->peg_parsews();
        while ($s3 !== $this->peg_FAILED) {
          $s2[] = $s3;
          $s3 = $this->peg_parsews();
        }
        if ($s2 !== $this->peg_FAILED) {
          $s1 = array($s1, $s2);
          $s0 = $s1;
        } else {
          $this->peg_currPos = $s0;
          $s0 = $this->peg_FAILED;
        }
      } else {
        $this->peg_currPos = $s0;
        $s0 = $this->peg_FAILED;
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parseText() {

      $key    = $this->peg_currPos * 43 + 36;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if (peg_regex_test($this->peg_c38, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c39);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parsechars() {

      $key    = $this->peg_currPos * 43 + 37;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if (peg_regex_test($this->peg_c40, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c41);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parsews() {

      $key    = $this->peg_currPos * 43 + 38;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      $this->peg_silentFails++;
      if (peg_regex_test($this->peg_c43, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c44);
        }
      }
      $this->peg_silentFails--;
      if ($s0 === $this->peg_FAILED) {
        $s1 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c42);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parsevalid_variable_characters() {

      $key    = $this->peg_currPos * 43 + 39;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if (peg_regex_test($this->peg_c45, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c46);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parselogic_chars() {

      $key    = $this->peg_currPos * 43 + 40;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c47) {
        $s0 = $this->peg_c47;
        $this->peg_currPos += 2;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c48);
        }
      }
      if ($s0 === $this->peg_FAILED) {
        if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c49) {
          $s0 = $this->peg_c49;
          $this->peg_currPos += 2;
        } else {
          $s0 = $this->peg_FAILED;
          if ($this->peg_silentFails === 0) {
              $this->peg_fail($this->peg_c50);
          }
        }
        if ($s0 === $this->peg_FAILED) {
          if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c51) {
            $s0 = $this->peg_c51;
            $this->peg_currPos += 2;
          } else {
            $s0 = $this->peg_FAILED;
            if ($this->peg_silentFails === 0) {
                $this->peg_fail($this->peg_c52);
            }
          }
          if ($s0 === $this->peg_FAILED) {
            if (peg_regex_test($this->peg_c53, $this->input_substr($this->peg_currPos, 1))) {
              $s0 = $this->input_substr($this->peg_currPos, 1);
              $this->peg_currPos++;
            } else {
              $s0 = $this->peg_FAILED;
              if ($this->peg_silentFails === 0) {
                  $this->peg_fail($this->peg_c54);
              }
            }
            if ($s0 === $this->peg_FAILED) {
              if ($this->input_substr($this->peg_currPos, 2) === $this->peg_c55) {
                $s0 = $this->peg_c55;
                $this->peg_currPos += 2;
              } else {
                $s0 = $this->peg_FAILED;
                if ($this->peg_silentFails === 0) {
                    $this->peg_fail($this->peg_c56);
                }
              }
            }
          }
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parsemath_chars() {

      $key    = $this->peg_currPos * 43 + 41;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if (peg_regex_test($this->peg_c57, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c58);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

    private function peg_parsenumbers() {

      $key    = $this->peg_currPos * 43 + 42;
          $cached = isset($this->peg_cache[$key]) ? $this->peg_cache[$key] : null;

      if ($cached) {
        $this->peg_currPos = $cached["nextPos"];
        return $cached["result"];
      }

      if (peg_regex_test($this->peg_c59, $this->input_substr($this->peg_currPos, 1))) {
        $s0 = $this->input_substr($this->peg_currPos, 1);
        $this->peg_currPos++;
      } else {
        $s0 = $this->peg_FAILED;
        if ($this->peg_silentFails === 0) {
            $this->peg_fail($this->peg_c60);
        }
      }

      $this->peg_cache[$key] = array ("nextPos" => $this->peg_currPos, "result" => $s0 );

      return $s0;
    }

  public function parse($input) {
    $arguments = func_get_args();
    $options = count($arguments) > 1 ? $arguments[1] : array();
    $this->cleanup_state();

    if (is_array($input)) {
        $this->input = $input;
    } else {
        preg_match_all("/./us", $input, $match);
        $this->input = $match[0];
    }
    $this->input_length = count($this->input);

    $old_regex_encoding = mb_regex_encoding();
    mb_regex_encoding("UTF-8");

    $this->peg_FAILED = new \stdClass;
    $this->peg_c0 = ".";
    $this->peg_c1 = array( "type" => "literal", "value" => ".", "description" => "\".\"" );
    $this->peg_c2 = "-";
    $this->peg_c3 = array( "type" => "literal", "value" => "-", "description" => "\"-\"" );
    $this->peg_c4 = "/^[a-zA-Z_0-9\\^]/";
    $this->peg_c5 = array( "type" => "class", "value" => "[a-zA-Z_0-9^]", "description" => "[a-zA-Z_0-9^]" );
    $this->peg_c6 = "null";
    $this->peg_c7 = array( "type" => "literal", "value" => "null", "description" => "\"null\"" );
    $this->peg_c8 = "NULL";
    $this->peg_c9 = array( "type" => "literal", "value" => "NULL", "description" => "\"NULL\"" );
    $this->peg_c10 = "true";
    $this->peg_c11 = array( "type" => "literal", "value" => "true", "description" => "\"true\"" );
    $this->peg_c12 = "TRUE";
    $this->peg_c13 = array( "type" => "literal", "value" => "TRUE", "description" => "\"TRUE\"" );
    $this->peg_c14 = "false";
    $this->peg_c15 = array( "type" => "literal", "value" => "false", "description" => "\"false\"" );
    $this->peg_c16 = "FALSE";
    $this->peg_c17 = array( "type" => "literal", "value" => "FALSE", "description" => "\"FALSE\"" );
    $this->peg_c18 = "\\";
    $this->peg_c19 = array( "type" => "literal", "value" => "\\", "description" => "\"\\\\\"" );
    $this->peg_c20 = "'";
    $this->peg_c21 = array( "type" => "literal", "value" => "'", "description" => "\"'\"" );
    $this->peg_c22 = "\"";
    $this->peg_c23 = array( "type" => "literal", "value" => "\"", "description" => "\"\\\"\"" );
    $this->peg_c24 = "/^[^\"]/";
    $this->peg_c25 = array( "type" => "class", "value" => "[\"]", "description" => "[\"]" );
    $this->peg_c26 = "/^[^']/";
    $this->peg_c27 = array( "type" => "class", "value" => "[']", "description" => "[']" );
    $this->peg_c28 = "(";
    $this->peg_c29 = array( "type" => "literal", "value" => "(", "description" => "\"(\"" );
    $this->peg_c30 = ")";
    $this->peg_c31 = array( "type" => "literal", "value" => ")", "description" => "\")\"" );
    $this->peg_c32 = "@";
    $this->peg_c33 = array( "type" => "literal", "value" => "@", "description" => "\"@\"" );
    $this->peg_c34 = "&";
    $this->peg_c35 = array( "type" => "literal", "value" => "&", "description" => "\"&\"" );
    $this->peg_c36 = ",";
    $this->peg_c37 = array( "type" => "literal", "value" => ",", "description" => "\",\"" );
    $this->peg_c38 = "/^[^@]/";
    $this->peg_c39 = array( "type" => "class", "value" => "[@]", "description" => "[@]" );
    $this->peg_c40 = "/^[a-zA-Z_0-9]/";
    $this->peg_c41 = array( "type" => "class", "value" => "[a-zA-Z_0-9]", "description" => "[a-zA-Z_0-9]" );
    $this->peg_c42 = array("type" => "other", "description" => "whitespace" );
    $this->peg_c43 = "/^[ \\t\\n\\r]/";
    $this->peg_c44 = array( "type" => "class", "value" => "[ \t\n\r]", "description" => "[ \t\n\r]" );
    $this->peg_c45 = "/^[a-zA-Z_]/";
    $this->peg_c46 = array( "type" => "class", "value" => "[a-zA-Z_]", "description" => "[a-zA-Z_]" );
    $this->peg_c47 = "<=";
    $this->peg_c48 = array( "type" => "literal", "value" => "<=", "description" => "\"<=\"" );
    $this->peg_c49 = ">=";
    $this->peg_c50 = array( "type" => "literal", "value" => ">=", "description" => "\">=\"" );
    $this->peg_c51 = "<>";
    $this->peg_c52 = array( "type" => "literal", "value" => "<>", "description" => "\"<>\"" );
    $this->peg_c53 = "/^[=<>]/";
    $this->peg_c54 = array( "type" => "class", "value" => "[=<>]", "description" => "[=<>]" );
    $this->peg_c55 = "!=";
    $this->peg_c56 = array( "type" => "literal", "value" => "!=", "description" => "\"!=\"" );
    $this->peg_c57 = "/^[-+*\\^\\/]/";
    $this->peg_c58 = array( "type" => "class", "value" => "[-+*^/]", "description" => "[-+*^/]" );
    $this->peg_c59 = "/^[0-9.]/";
    $this->peg_c60 = array( "type" => "class", "value" => "[0-9.]", "description" => "[0-9.]" );

    $peg_startRuleFunctions = array( 'Start' => array($this, "peg_parseStart") );
    $peg_startRuleFunction  = array($this, "peg_parseStart");
    if (isset($options["startRule"])) {
      if (!(isset($peg_startRuleFunctions[$options["startRule"]]))) {
        throw new \Exception("Can't start parsing from rule \"" + $options["startRule"] + "\".");
      }

      $peg_startRuleFunction = $peg_startRuleFunctions[$options["startRule"]];
    }

    /* BEGIN initializer code */

      $this->_member = function($key) {
        return [
          'type' => 'MEMBER',
          'key' => $key,
          'location' => call_user_func($this->_location)
        ];
      };
      
      $this->_method = function($call, $args, $chain) {
        return [
          'type' => 'METHOD',
          'call' => $call,
          'args' => $args,
          'chain' => $chain,
          'location' => call_user_func($this->_location)
        ];
      };
      
      $this->_math = function($lhs, $rhs, $operator) {
        return [
          'type' => 'MATH',
          'lhs' => $lhs,
          'rhs' => $rhs,
          'operator' => $operator,
          'location' => call_user_func($this->_location)
        ];
      };
      
      $this->_logic = function($lhs, $rhs, $operator) {
        return [
          'type' => 'LOGIC',
          'rhs' => $rhs,
          'lhs' => $lhs,
          'operator' => $operator,
          'location' => call_user_func($this->_location)
        ];
      };
      
        $this->_escape = function() {
          return [
            'type' => 'ESCAPE',
            'location' => call_user_func($this->_location)
          ];
        };
      
      $this->_concatenate = function($lhs, $rhs) {
        return [
          'type' => 'CONCATENATE',
          'rhs' => $rhs,
          'lhs' => $lhs,
          'location' => call_user_func($this->_location)
        ];
      };
      
        $this->_null = function() {
          return [
            'type' => 'NULL',
            'location' => call_user_func($this->_location)
          ];
        };
      
        $this->_bool = function() {
          return [
            'type' => 'BOOL',
            'value' => call_user_func($this->_text),
            'location' => call_user_func($this->_location)
          ];
        };
      
        // we can build the location information the same way as
        // it is available in js via location()
        $_location = function() {
            $offset_start = $this->peg_reportedPos;
            $offset_end = $this->peg_currPos;
            $compute_pd_start = $this->peg_computePosDetails($offset_start);
            $compute_pd_end = $this->peg_computePosDetails($offset_end);
          return [
            'start' => [
              'offset' => $offset_start,
              'line' => $compute_pd_start['line'],
              'column' => $compute_pd_start['column'],
            ],
            'end' => [
              'offset' => $offset_end,
              'line' => $compute_pd_end['line'],
              'column' => $compute_pd_end['column'],
            ]
          ];
        };
        // Bind the location fn to the parser instance to allow private access
        $this->_location = $_location->bindTo($this);

        // same for text
        $_text = function() {
          return substr(implode($this->input), $this->peg_reportedPos, $this->peg_currPos - $this->peg_reportedPos);
        };
        $this->_text = $_text->bindTo($this);
      
    /* END initializer code */

    $peg_result = call_user_func($peg_startRuleFunction);

    $this->peg_cache = array();

    mb_regex_encoding($old_regex_encoding);

    if ($peg_result !== $this->peg_FAILED && $this->peg_currPos === $this->input_length) {
      $this->cleanup_state(); // Free up memory
      return $peg_result;
    } else {
      if ($peg_result !== $this->peg_FAILED && $this->peg_currPos < $this->input_length) {
        $this->peg_fail(array("type" => "end", "description" => "end of input" ));
      }

      $exception = $this->peg_buildException(null, $this->peg_maxFailExpected, $this->peg_maxFailPos);
      $this->cleanup_state(); // Free up memory
      throw $exception;
    }
  }

};
